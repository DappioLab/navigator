import { publicKey, struct, u64, u128, u8, bool, u16, i64, f64 } from "@project-serum/borsh";
// @ts-ignore
import { blob, seq } from "buffer-layout";

export const VOLT_VAULT_LAYOUT = struct([
  blob(8, "identifier"),
  publicKey("adminKey"),
  publicKey("seed"),
  u64("transferWindow"),
  u64("startTransferTime"),
  u64("endTransferTime"),
  bool("initialized"),
  bool("currOptionWasSettled"),
  bool("mustSwapPremiumToUnderlying"),
  bool("nextOptionWasSet"),
  bool("firstEverOptionWasSet"),
  bool("instantTransfersEnabled"),
  bool("prepareIsFinished"),
  bool("enterIsFinished"),
  bool("roundHasStarted"),
  u64("roundNumber"),
  u64("totalUnderlyingPreEnter"),
  u64("totalUnderlyingPostSettle"),
  u64("totalVoltTokensPostSettle"),
  publicKey("vaultAuthority"),
  publicKey("depositPool"),
  publicKey("premiumPool"),
  publicKey("optionPool"),
  publicKey("writerTokenPool"),
  publicKey("vaultMint"),
  publicKey("underlyingAssetMint"),
  publicKey("quoteAssetMint"),
  publicKey("optionMint"),
  publicKey("writerTokenMint"),
  publicKey("optionMarket"),
  u64("vaultType"),
  u64("underlyingAmountPerContract"),
  u64("quoteAmountPerContract"),
  i64("expirationUnixTimestamp"),
  u64("expirationInterval"),
  u64("upperBoundOtmStrikeFactor"),
  bool("haveTakenWithdrawalFees"),
  publicKey("serumSpotMarket"),
  u8("openOrdersBump"),
  u8("openOrdersInitBump"),
  u8("ulOpenOrdersBump"),
  publicKey("ulOpenOrders"),
  bool("ulOpenOrdersInitialized"),
  u8("bumpAuthority"),
  u64("serumOrderSizeOptions"),
  u64("individualCapacity"),
  u64("serumOrderType"),
  u16("serumLimit"),
  u16("serumSelfTradeBehavior"),
  u64("serumClientOrderId"),
  publicKey("whitelistTokenMint"),
  publicKey("permissionedMarketPremiumMint"),
  publicKey("permissionedMarketPremiumPool"),
  u64("capacity"),
]);

export const USER_PENDING_LAYOUT = struct([
  blob(8, "identifier"),
  bool("initialized"),
  u64("roundNumber"),
  u64("amount"),
]);

export const ROUND_LAYOUT = struct([
  blob(8, "identifier"),
  u64("roundNumber"), //changed from "number"
  u64("underlyingFromPendingDeposits"),
  u64("voltTokensFromPendingWithdrawals"),
  u64("underlyingPreEnter"),
  u64("underlyingPostSettle"),
  u64("premiumFarmed"),
]);

export const EPOCH_INFO_LAYOUT = struct([
  blob(8, "identifier"),
  f64("vaultTokenPrice"),
  f64("pctPnl"),
  u64("epochNumber"), //changed from "number"
  u64("underlyingPreEnter"),
  u64("underlyingPostSettle"),
  u64("voltTokenSupply"),
  i64("pnl"),
  u64("performanceFees"),
  u64("withdrawalFees"),
  u64("pendingDeposits"),
  u64("pendingWithdrawalsVoltTokens"),
  u64("pendingWithdrawals"),
  u64("canceledWithdrawals"),
  u64("canceledDeposits"),
  u64("totalWithdrawals"),
  u64("totalDeposits"),
  u64("instantDeposits"),
  u64("instantWithdrawals"),
  u64("unusedUint1"),
  u64("mintedOptions"),
  u64("enterNumTimesCalled"),
  u64("swapPremiumNumTimesCalled"),
  publicKey("optionKey"),
  publicKey("extraKeyFour"),
  publicKey("extraKey5"),
  publicKey("extraKey6"),
  publicKey("extraKey7"),
  publicKey("extraKey8"),
  publicKey("extraKey9"),
  publicKey("extraKey10"),
  publicKey("extraKey11"),
  publicKey("extraKey12"),
  u64("startRoundTime"),
  u64("beginAuctionTime"),
  u64("endAuctionTime"),
  u64("unusedUint7"),
  u64("unusedUint8"),
  u64("unusedUint9"),
  u64("unusedUint10"),
  u64("totalWithdrawalsFromRealms"),
  u64("totalDepositsFromRealms"),
  bool("dovPerformanceFeesInUnderlying"),
  bool("usedOtcOrders"),
  bool("unusedBoolThree"),
  bool("unusedBoolFour"),
  bool("unusedBoolFive"),
  bool("unusedBoolSix"),
]);

export const EXTRA_VOLT_DATA_LAYOUT = struct([
  blob(8, "identifier"),
  bool("isWhitelisted"),
  publicKey("whitelist"),
  bool("isForDao"),
  publicKey("daoProgramId"),
  publicKey("depositMint"),
  f64("targetLeverage"),
  f64("targetLeverageLenience"),
  f64("exitEarlyRatio"),
  publicKey("entropyProgramId"),
  publicKey("entropyGroup"),
  publicKey("entropyAccount"),
  publicKey("powerPerpMarket"),
  bool("haveResolvedDeposits"),
  bool("doneRebalancing"),
  publicKey("daoAuthority"),
  publicKey("serumProgramId"),
  publicKey("entropyCache"),
  publicKey("hedgingSpotPerpMarket"),
  publicKey("entropyMetadata"),
  publicKey("hedgingSpotMarket"),
  publicKey("auctionMetadata"),
  publicKey("extraKey10"),
  publicKey("extraKey11"),
  publicKey("extraKey12"),
  publicKey("extraKey13"),
  publicKey("extraKey14"),
  u64("unusedUintOne"),
  u64("maxQuotePosChange"),
  f64("targetHedgeLenience"),
  u64("unusedUintFour"),
  u64("unusedUintFive"),
  u64("unusedUintSix"),
  u64("unusedUint7"),
  u64("unusedUint8"),
  u64("unusedUint9"),
  u64("useCustomFees"),
  u64("performanceFeeBps"),
  u64("withdrawalFeeBps"),
  bool("turnOffDepositsAndWithdrawals"),
  bool("rebalanceIsReady"),
  bool("dovPerformanceFeesInUnderlyings"),
  bool("doneRebalancingPowerPerp"),
  bool("isHedgingOn"),
  bool("haveTakenPerformanceFees"),
]);
export const ENTROPY_METADATA_LAYOUT = struct([
  blob(8, "identifier"),
  f64("targetHedgeRatio"),
  f64("rebalancingLenience"),
  f64("requiredBasisFromOracle"),
  publicKey("spotOpenOrders"),
  seq(struct([publicKey("extraKey")]), 9, "extras"),
  seq(struct([u64("unusedUint")]), 8, "unusedUints"),
  f64("targetCurrBasePosition"),
  f64("targetCurrQuotePosition"),
  f64("hedgeLenience"),
  seq(struct([f64("unusedF64")]), 9, "unusedF64s"),
  bool("hedgeWithSpot"),
]);
